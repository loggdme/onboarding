name: CI Pipeline

on:
  workflow_dispatch:
  push:

permissions:
  contents: write
  pull-requests: write

jobs:
  changes:
    name: Determine
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      importer: ${{ steps.filter.outputs.importer }}
      media-downloader: ${{ steps.filter.outputs.media-downloader }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - '.github/workflows/ci.yml'
              - 'frontend/**'
            importer:
              - '.github/workflows/ci.yml'
              - 'importer/**'
            media-downloader:
              - '.github/workflows/ci.yml'
              - 'media-downloader/**'

  frontend:
    name: Lint and build frontend
    runs-on: ubuntu-latest

    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lock') }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install
        working-directory: frontend

      - name: Run linter
        run: bun run lint
        working-directory: frontend

      - name: Build project
        run: bun run build
        working-directory: frontend

  importer:
    name: Lint and build importer
    runs-on: ubuntu-latest

    needs: changes
    if: ${{ needs.changes.outputs.importer == 'true' }}

    env:
      DENO_DIR: ~/.deno/install/cache

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('importer/deno.lock') }}

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.2.8

      - name: Install dependencies
        run: deno install
        working-directory: importer

      - name: Run linter
        run: deno task lint
        working-directory: importer

  media-downloader:
    name: Lint and build media downloader
    runs-on: ubuntu-latest

    needs: changes
    if: ${{ needs.changes.outputs.media-downloader == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache-dependency-path: media-downloader/go.mod

      - name: Install dependencies
        run: go get .
        working-directory: media-downloader

      - name: Check code formatting
        run: if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then exit 1; fi
        working-directory: media-downloader

      - name: Check code style
        run: go vet
        working-directory: media-downloader

      - name: Build application
        run: go build -v -o app .
        working-directory: media-downloader
